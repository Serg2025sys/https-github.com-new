from telegram import (
    Update, Message, InlineKeyboardMarkup, InlineKeyboardButton,
    KeyboardButton, ReplyKeyboardMarkup, Contact, InputFile
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    CallbackQueryHandler,
    filters,
)
import logging
import csv
import os

# üîß –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)

# üîë –î–∞–Ω—ñ
TOKEN = "8076139113:AAGgi6Gjtdqh2nBPSfDYP4OlDkPzhrdy8ro"
ADMIN_ID = 466868254

# üì¶ –ü–∞–º‚Äô—è—Ç—å
user_message_map = {}
known_users = set()
user_phonebook = {}

# üìù –ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç —É CSV
def save_contact_to_csv(user_id: int, username: str, full_name: str, phone: str):
    file_exists = os.path.isfile("contacts.csv")
    rows = []

    if file_exists:
        with open("contacts.csv", "r", newline='', encoding="utf-8") as f:
            reader = csv.DictReader(f)
            rows = list(reader)

    updated = False
    for row in rows:
        if int(row["user_id"]) == user_id:
            row["username"] = username or ""
            row["full_name"] = full_name
            row["phone"] = phone
            updated = True
            break

    if not updated:
        rows.append({
            "user_id": user_id,
            "username": username or "",
            "full_name": full_name,
            "phone": phone
        })

    with open("contacts.csv", "w", newline='', encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=["user_id", "username", "full_name", "phone"])
        writer.writeheader()
        writer.writerows(rows)

# üì§ –ö–æ–º–∞–Ω–¥–∞ /export
async def export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    try:
        with open("contacts.csv", "rb") as f:
            await update.message.reply_document(document=InputFile(f), filename="contacts.csv")
    except FileNotFoundError:
        await update.message.reply_text("‚ùå –§–∞–π–ª contacts.csv —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")

# üì• –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    msg = update.message
    user_id = user.id
    known_users.add(user_id)

    phone = user_phonebook.get(user_id, "üìµ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–¥–∞–Ω–æ")
    user_display = f"@{user.username}" if user.username else user.full_name
    caption = f"üì© –í—ñ–¥ {user_display} (ID: {user_id})\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"

    keyboard = [
        [
            InlineKeyboardButton("‚ù§Ô∏è", callback_data=f"react_{user_id}_{msg.message_id}_heart"),
            InlineKeyboardButton("üëç", callback_data=f"react_{user_id}_{msg.message_id}_like"),
            InlineKeyboardButton("üòÇ", callback_data=f"react_{user_id}_{msg.message_id}_lol"),
        ],
        [
            InlineKeyboardButton("ü§ù", callback_data=f"react_{user_id}_{msg.message_id}_handshake"),
            InlineKeyboardButton("üî•", callback_data=f"react_{user_id}_{msg.message_id}_fire"),
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    if msg.photo:
        file = msg.photo[-1].file_id
        sent = await context.bot.send_photo(chat_id=ADMIN_ID, photo=file, caption=caption, reply_markup=markup)
    elif msg.video:
        sent = await context.bot.send_video(chat_id=ADMIN_ID, video=msg.video.file_id, caption=caption, reply_markup=markup)
    elif msg.text:
        sent = await context.bot.send_message(chat_id=ADMIN_ID, text=f"{caption}:\n\n{msg.text}", reply_markup=markup)
    else:
        sent = await context.bot.send_message(chat_id=ADMIN_ID, text=f"{caption} ‚Äî –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", reply_markup=markup)

    user_message_map[sent.message_id] = (user_id, msg.message_id)

    if user_id not in user_phonebook:
        button = KeyboardButton("üì≤ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä", request_contact=True)
        reply_markup = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)
        await msg.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=reply_markup)

# ‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç
async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact: Contact = update.message.contact
    user_id = contact.user_id
    phone = contact.phone_number

    user_phonebook[user_id] = phone
    save_contact_to_csv(
        user_id=user_id,
        username=update.effective_user.username,
        full_name=update.effective_user.full_name,
        phone=phone
    )

    await update.message.reply_text("‚úÖ –ù–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –î—è–∫—É—î–º–æ!")

    user_display = f"@{update.effective_user.username}" if update.effective_user.username else update.effective_user.full_name
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üì• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_display} –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}"
    )

# üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ —Ä–æ–∑—Å–∏–ª–∫–∞
async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    reply = update.message.reply_to_message

    if reply:
        user_data = user_message_map.get(reply.message_id)
        if not user_data:
            await update.message.reply_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞.")
            return

        user_id, user_msg_id = user_data

        if update.message.text:
            await context.bot.send_message(chat_id=user_id, text=update.message.text, reply_to_message_id=user_msg_id)
        elif update.message.photo:
            file_id = update.message.photo[-1].file_id
            await context.bot.send_photo(chat_id=user_id, photo=file_id, reply_to_message_id=user_msg_id)
        elif update.message.video:
            file_id = update.message.video.file_id
            await context.bot.send_video(chat_id=user_id, video=file_id, reply_to_message_id=user_msg_id)
        else:
            await update.message.reply_text("‚ùó –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ª–∏—à–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ.")
            return

        await update.message.reply_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
        return

    count, failed = 0, 0
    for user_id in known_users:
        try:
            if update.message.text:
                await context.bot.send_message(chat_id=user_id, text=update.message.text)
            elif update.message.photo:
                file_id = update.message.photo[-1].file_id
                await context.bot.send_photo(chat_id=user_id, photo=file_id)
            elif update.message.video:
                file_id = update.message.video.file_id
                await context.bot.send_video(chat_id=user_id, video=file_id)
            count += 1
        except Exception as e:
            logging.warning(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–æ {user_id}: {e}")
            failed += 1

    await update.message.reply_text(f"üì¢ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ‚úÖ {count}, ‚ùå {failed}")

# üîÅ –†–µ–∞–∫—Ü—ñ—ó
async def handle_reaction_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    parts = query.data.split("_")
    if len(parts) != 4:
        await context.bot.send_message(chat_id=ADMIN_ID, text="‚ùó –ù–µ–≤—ñ—Ä–Ω–∞ —Ä–µ–∞–∫—Ü—ñ—è.")
        return

    _, user_id_str, user_msg_id_str, reaction_key = parts
    try:
        user_id = int(user_id_str)
        user_msg_id = int(user_msg_id_str)
    except ValueError:
        await context.bot.send_message(chat_id=ADMIN_ID, text="‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ ID.")
        return

    reactions = {
        "heart": "‚ù§Ô∏è –°–µ—Ä–¥–µ—á–∫–æ",
        "like": "üëç –õ–∞–π–∫",
        "lol": "üòÇ –°–º—ñ—à–Ω–æ",
        "handshake": "ü§ù –†—É–∫–æ—Å—Ç–∏—Å–∫–∞–Ω–Ω—è",
        "fire": "üî• –í–æ–≥–æ–Ω—å"
    }

    reaction_text = reactions.get(reaction_key, "‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ —Ä–µ–∞–∫—Ü—ñ—è")

    await context.bot.send_message(
        chat_id=query.from_user.id,
        text=f"‚úÖ –í–∏ –≤–∏–±—Ä–∞–ª–∏: {reaction_text}",
        reply_to_message_id=query.message.message_id
    )

    await context.bot.send_message(
        chat_id=user_id,
        text=f"üîÅ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥—Ä–µ–∞–≥—É–≤–∞–≤: {reaction_text}",
        reply_to_message_id=user_msg_id
    )

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("export", export_csv))
app.add_handler(MessageHandler(filters.CONTACT, handle_contact))
app.add_handler(MessageHandler(~filters.User(user_id=ADMIN_ID), handle_user_message))
app.add_handler(MessageHandler(filters.User(user_id=ADMIN_ID), handle_admin_reply))
app.add_handler(CallbackQueryHandler(handle_reaction_callback))

app.run_polling()
